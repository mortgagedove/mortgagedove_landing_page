import type { Booleanish, ColorVariant } from '../../types';
import { PropType } from 'vue';
declare const _sfc_main: import("vue").DefineComponent<{
    bgColor: {
        type: StringConstructor;
        required: false;
    };
    blur: {
        type: StringConstructor;
        default: string;
    };
    fixed: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    noCenter: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    noFade: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    noWrap: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    opacity: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
        validator: (value: number | string) => boolean;
    };
    overlayTag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    show: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    spinnerSmall: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    spinnerType: {
        type: StringConstructor;
        default: string;
    };
    spinnerVariant: {
        type: StringConstructor;
        required: false;
    };
    variant: {
        type: PropType<ColorVariant>;
        default: string;
    };
    wrapTag: {
        type: StringConstructor;
        default: string;
    };
    zIndex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("shown" | "hidden" | "click")[], "shown" | "hidden" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    bgColor: {
        type: StringConstructor;
        required: false;
    };
    blur: {
        type: StringConstructor;
        default: string;
    };
    fixed: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    noCenter: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    noFade: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    noWrap: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    opacity: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
        validator: (value: number | string) => boolean;
    };
    overlayTag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    show: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    spinnerSmall: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    spinnerType: {
        type: StringConstructor;
        default: string;
    };
    spinnerVariant: {
        type: StringConstructor;
        required: false;
    };
    variant: {
        type: PropType<ColorVariant>;
        default: string;
    };
    wrapTag: {
        type: StringConstructor;
        default: string;
    };
    zIndex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
}>> & {
    onShown?: ((...args: any[]) => any) | undefined;
    onHidden?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    fixed: Booleanish;
    show: Booleanish;
    variant: ColorVariant;
    rounded: string | boolean;
    opacity: string | number;
    zIndex: string | number;
    noWrap: Booleanish;
    blur: string;
    noFade: Booleanish;
    noCenter: Booleanish;
    overlayTag: string;
    spinnerSmall: Booleanish;
    spinnerType: string;
    wrapTag: string;
}>;
export default _sfc_main;
